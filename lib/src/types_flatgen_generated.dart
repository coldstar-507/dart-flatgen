// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library flatgen;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class MessageId {
  MessageId._(this._bc, this._bcOffset);
  factory MessageId(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageId> reader = _MessageIdReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get u32 => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  Root? get root => Root.reader.vTableGetNullable(_bc, _bcOffset, 8);
  int get kind => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'MessageId{timestamp: ${timestamp}, u32: ${u32}, root: ${root}, kind: ${kind}}';
  }

  MessageIdT unpack() => MessageIdT(
      timestamp: timestamp,
      u32: u32,
      root: root?.unpack(),
      kind: kind);

  static int pack(fb.Builder fbBuilder, MessageIdT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MessageIdT implements fb.Packable {
  int timestamp;
  int u32;
  RootT? root;
  int kind;

  MessageIdT({
      this.timestamp = 0,
      this.u32 = 0,
      this.root,
      this.kind = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? rootOffset = root?.pack(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addInt64(0, timestamp);
    fbBuilder.addUint32(1, u32);
    fbBuilder.addOffset(2, rootOffset);
    fbBuilder.addUint8(3, kind);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MessageIdT{timestamp: ${timestamp}, u32: ${u32}, root: ${root}, kind: ${kind}}';
  }
}

class _MessageIdReader extends fb.TableReader<MessageId> {
  const _MessageIdReader();

  @override
  MessageId createObject(fb.BufferContext bc, int offset) => 
    MessageId._(bc, offset);
}

class MessageIdBuilder {
  MessageIdBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(0, timestamp);
    return fbBuilder.offset;
  }
  int addU32(int? u32) {
    fbBuilder.addUint32(1, u32);
    return fbBuilder.offset;
  }
  int addRootOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addKind(int? kind) {
    fbBuilder.addUint8(3, kind);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageIdObjectBuilder extends fb.ObjectBuilder {
  final int? _timestamp;
  final int? _u32;
  final RootObjectBuilder? _root;
  final int? _kind;

  MessageIdObjectBuilder({
    int? timestamp,
    int? u32,
    RootObjectBuilder? root,
    int? kind,
  })
      : _timestamp = timestamp,
        _u32 = u32,
        _root = root,
        _kind = kind;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? rootOffset = _root?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addInt64(0, _timestamp);
    fbBuilder.addUint32(1, _u32);
    fbBuilder.addOffset(2, rootOffset);
    fbBuilder.addUint8(3, _kind);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MediaId {
  MediaId._(this._bc, this._bcOffset);
  factory MediaId(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MediaId> reader = _MediaIdReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get u32 => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get width => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get height => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 10, 0);
  bool get squared => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  bool get video => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  int get kind => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 16, 0);

  @override
  String toString() {
    return 'MediaId{timestamp: ${timestamp}, u32: ${u32}, width: ${width}, height: ${height}, squared: ${squared}, video: ${video}, kind: ${kind}}';
  }

  MediaIdT unpack() => MediaIdT(
      timestamp: timestamp,
      u32: u32,
      width: width,
      height: height,
      squared: squared,
      video: video,
      kind: kind);

  static int pack(fb.Builder fbBuilder, MediaIdT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MediaIdT implements fb.Packable {
  int timestamp;
  int u32;
  int width;
  int height;
  bool squared;
  bool video;
  int kind;

  MediaIdT({
      this.timestamp = 0,
      this.u32 = 0,
      this.width = 0,
      this.height = 0,
      this.squared = false,
      this.video = false,
      this.kind = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addInt64(0, timestamp);
    fbBuilder.addUint32(1, u32);
    fbBuilder.addUint16(2, width);
    fbBuilder.addUint16(3, height);
    fbBuilder.addBool(4, squared);
    fbBuilder.addBool(5, video);
    fbBuilder.addUint8(6, kind);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MediaIdT{timestamp: ${timestamp}, u32: ${u32}, width: ${width}, height: ${height}, squared: ${squared}, video: ${video}, kind: ${kind}}';
  }
}

class _MediaIdReader extends fb.TableReader<MediaId> {
  const _MediaIdReader();

  @override
  MediaId createObject(fb.BufferContext bc, int offset) => 
    MediaId._(bc, offset);
}

class MediaIdBuilder {
  MediaIdBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(0, timestamp);
    return fbBuilder.offset;
  }
  int addU32(int? u32) {
    fbBuilder.addUint32(1, u32);
    return fbBuilder.offset;
  }
  int addWidth(int? width) {
    fbBuilder.addUint16(2, width);
    return fbBuilder.offset;
  }
  int addHeight(int? height) {
    fbBuilder.addUint16(3, height);
    return fbBuilder.offset;
  }
  int addSquared(bool? squared) {
    fbBuilder.addBool(4, squared);
    return fbBuilder.offset;
  }
  int addVideo(bool? video) {
    fbBuilder.addBool(5, video);
    return fbBuilder.offset;
  }
  int addKind(int? kind) {
    fbBuilder.addUint8(6, kind);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MediaIdObjectBuilder extends fb.ObjectBuilder {
  final int? _timestamp;
  final int? _u32;
  final int? _width;
  final int? _height;
  final bool? _squared;
  final bool? _video;
  final int? _kind;

  MediaIdObjectBuilder({
    int? timestamp,
    int? u32,
    int? width,
    int? height,
    bool? squared,
    bool? video,
    int? kind,
  })
      : _timestamp = timestamp,
        _u32 = u32,
        _width = width,
        _height = height,
        _squared = squared,
        _video = video,
        _kind = kind;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addInt64(0, _timestamp);
    fbBuilder.addUint32(1, _u32);
    fbBuilder.addUint16(2, _width);
    fbBuilder.addUint16(3, _height);
    fbBuilder.addBool(4, _squared);
    fbBuilder.addBool(5, _video);
    fbBuilder.addUint8(6, _kind);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MediaRef {
  MediaRef._(this._bc, this._bcOffset);
  factory MediaRef(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MediaRef> reader = _MediaRefReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get place => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 6, 0);
  MediaId? get mediaId => MediaId.reader.vTableGetNullable(_bc, _bcOffset, 8);
  bool get temporary => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  int get kind => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 12, 0);

  @override
  String toString() {
    return 'MediaRef{timestamp: ${timestamp}, place: ${place}, mediaId: ${mediaId}, temporary: ${temporary}, kind: ${kind}}';
  }

  MediaRefT unpack() => MediaRefT(
      timestamp: timestamp,
      place: place,
      mediaId: mediaId?.unpack(),
      temporary: temporary,
      kind: kind);

  static int pack(fb.Builder fbBuilder, MediaRefT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MediaRefT implements fb.Packable {
  int timestamp;
  int place;
  MediaIdT? mediaId;
  bool temporary;
  int kind;

  MediaRefT({
      this.timestamp = 0,
      this.place = 0,
      this.mediaId,
      this.temporary = false,
      this.kind = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? mediaIdOffset = mediaId?.pack(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addInt64(0, timestamp);
    fbBuilder.addUint16(1, place);
    fbBuilder.addOffset(2, mediaIdOffset);
    fbBuilder.addBool(3, temporary);
    fbBuilder.addUint8(4, kind);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MediaRefT{timestamp: ${timestamp}, place: ${place}, mediaId: ${mediaId}, temporary: ${temporary}, kind: ${kind}}';
  }
}

class _MediaRefReader extends fb.TableReader<MediaRef> {
  const _MediaRefReader();

  @override
  MediaRef createObject(fb.BufferContext bc, int offset) => 
    MediaRef._(bc, offset);
}

class MediaRefBuilder {
  MediaRefBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(0, timestamp);
    return fbBuilder.offset;
  }
  int addPlace(int? place) {
    fbBuilder.addUint16(1, place);
    return fbBuilder.offset;
  }
  int addMediaIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTemporary(bool? temporary) {
    fbBuilder.addBool(3, temporary);
    return fbBuilder.offset;
  }
  int addKind(int? kind) {
    fbBuilder.addUint8(4, kind);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MediaRefObjectBuilder extends fb.ObjectBuilder {
  final int? _timestamp;
  final int? _place;
  final MediaIdObjectBuilder? _mediaId;
  final bool? _temporary;
  final int? _kind;

  MediaRefObjectBuilder({
    int? timestamp,
    int? place,
    MediaIdObjectBuilder? mediaId,
    bool? temporary,
    int? kind,
  })
      : _timestamp = timestamp,
        _place = place,
        _mediaId = mediaId,
        _temporary = temporary,
        _kind = kind;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? mediaIdOffset = _mediaId?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addInt64(0, _timestamp);
    fbBuilder.addUint16(1, _place);
    fbBuilder.addOffset(2, mediaIdOffset);
    fbBuilder.addBool(3, _temporary);
    fbBuilder.addUint8(4, _kind);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeId {
  NodeId._(this._bc, this._bcOffset);
  factory NodeId(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeId> reader = _NodeIdReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get u32 => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get kind => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'NodeId{timestamp: ${timestamp}, u32: ${u32}, kind: ${kind}}';
  }

  NodeIdT unpack() => NodeIdT(
      timestamp: timestamp,
      u32: u32,
      kind: kind);

  static int pack(fb.Builder fbBuilder, NodeIdT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class NodeIdT implements fb.Packable {
  int timestamp;
  int u32;
  int kind;

  NodeIdT({
      this.timestamp = 0,
      this.u32 = 0,
      this.kind = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(3);
    fbBuilder.addInt64(0, timestamp);
    fbBuilder.addUint32(1, u32);
    fbBuilder.addUint8(2, kind);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'NodeIdT{timestamp: ${timestamp}, u32: ${u32}, kind: ${kind}}';
  }
}

class _NodeIdReader extends fb.TableReader<NodeId> {
  const _NodeIdReader();

  @override
  NodeId createObject(fb.BufferContext bc, int offset) => 
    NodeId._(bc, offset);
}

class NodeIdBuilder {
  NodeIdBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(0, timestamp);
    return fbBuilder.offset;
  }
  int addU32(int? u32) {
    fbBuilder.addUint32(1, u32);
    return fbBuilder.offset;
  }
  int addKind(int? kind) {
    fbBuilder.addUint8(2, kind);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeIdObjectBuilder extends fb.ObjectBuilder {
  final int? _timestamp;
  final int? _u32;
  final int? _kind;

  NodeIdObjectBuilder({
    int? timestamp,
    int? u32,
    int? kind,
  })
      : _timestamp = timestamp,
        _u32 = u32,
        _kind = kind;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(3);
    fbBuilder.addInt64(0, _timestamp);
    fbBuilder.addUint32(1, _u32);
    fbBuilder.addUint8(2, _kind);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Root {
  Root._(this._bc, this._bcOffset);
  factory Root(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Root> reader = _RootReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  NodeId? get primary => NodeId.reader.vTableGetNullable(_bc, _bcOffset, 4);
  NodeId? get secondary => NodeId.reader.vTableGetNullable(_bc, _bcOffset, 6);
  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get chatPlace => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get kind => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 12, 0);

  @override
  String toString() {
    return 'Root{primary: ${primary}, secondary: ${secondary}, timestamp: ${timestamp}, chatPlace: ${chatPlace}, kind: ${kind}}';
  }

  RootT unpack() => RootT(
      primary: primary?.unpack(),
      secondary: secondary?.unpack(),
      timestamp: timestamp,
      chatPlace: chatPlace,
      kind: kind);

  static int pack(fb.Builder fbBuilder, RootT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class RootT implements fb.Packable {
  NodeIdT? primary;
  NodeIdT? secondary;
  int timestamp;
  int chatPlace;
  int kind;

  RootT({
      this.primary,
      this.secondary,
      this.timestamp = 0,
      this.chatPlace = 0,
      this.kind = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? primaryOffset = primary?.pack(fbBuilder);
    final int? secondaryOffset = secondary?.pack(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, primaryOffset);
    fbBuilder.addOffset(1, secondaryOffset);
    fbBuilder.addInt64(2, timestamp);
    fbBuilder.addUint16(3, chatPlace);
    fbBuilder.addUint8(4, kind);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'RootT{primary: ${primary}, secondary: ${secondary}, timestamp: ${timestamp}, chatPlace: ${chatPlace}, kind: ${kind}}';
  }
}

class _RootReader extends fb.TableReader<Root> {
  const _RootReader();

  @override
  Root createObject(fb.BufferContext bc, int offset) => 
    Root._(bc, offset);
}

class RootBuilder {
  RootBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addPrimaryOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSecondaryOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(2, timestamp);
    return fbBuilder.offset;
  }
  int addChatPlace(int? chatPlace) {
    fbBuilder.addUint16(3, chatPlace);
    return fbBuilder.offset;
  }
  int addKind(int? kind) {
    fbBuilder.addUint8(4, kind);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RootObjectBuilder extends fb.ObjectBuilder {
  final NodeIdObjectBuilder? _primary;
  final NodeIdObjectBuilder? _secondary;
  final int? _timestamp;
  final int? _chatPlace;
  final int? _kind;

  RootObjectBuilder({
    NodeIdObjectBuilder? primary,
    NodeIdObjectBuilder? secondary,
    int? timestamp,
    int? chatPlace,
    int? kind,
  })
      : _primary = primary,
        _secondary = secondary,
        _timestamp = timestamp,
        _chatPlace = chatPlace,
        _kind = kind;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? primaryOffset = _primary?.getOrCreateOffset(fbBuilder);
    final int? secondaryOffset = _secondary?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, primaryOffset);
    fbBuilder.addOffset(1, secondaryOffset);
    fbBuilder.addInt64(2, _timestamp);
    fbBuilder.addUint16(3, _chatPlace);
    fbBuilder.addUint8(4, _kind);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TempId {
  TempId._(this._bc, this._bcOffset);
  factory TempId(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TempId> reader = _TempIdReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get u32 => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get place => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get kind => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'TempId{timestamp: ${timestamp}, u32: ${u32}, place: ${place}, kind: ${kind}}';
  }

  TempIdT unpack() => TempIdT(
      timestamp: timestamp,
      u32: u32,
      place: place,
      kind: kind);

  static int pack(fb.Builder fbBuilder, TempIdT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TempIdT implements fb.Packable {
  int timestamp;
  int u32;
  int place;
  int kind;

  TempIdT({
      this.timestamp = 0,
      this.u32 = 0,
      this.place = 0,
      this.kind = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(4);
    fbBuilder.addInt64(0, timestamp);
    fbBuilder.addUint32(1, u32);
    fbBuilder.addUint16(2, place);
    fbBuilder.addUint8(3, kind);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TempIdT{timestamp: ${timestamp}, u32: ${u32}, place: ${place}, kind: ${kind}}';
  }
}

class _TempIdReader extends fb.TableReader<TempId> {
  const _TempIdReader();

  @override
  TempId createObject(fb.BufferContext bc, int offset) => 
    TempId._(bc, offset);
}

class TempIdBuilder {
  TempIdBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(0, timestamp);
    return fbBuilder.offset;
  }
  int addU32(int? u32) {
    fbBuilder.addUint32(1, u32);
    return fbBuilder.offset;
  }
  int addPlace(int? place) {
    fbBuilder.addUint16(2, place);
    return fbBuilder.offset;
  }
  int addKind(int? kind) {
    fbBuilder.addUint8(3, kind);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TempIdObjectBuilder extends fb.ObjectBuilder {
  final int? _timestamp;
  final int? _u32;
  final int? _place;
  final int? _kind;

  TempIdObjectBuilder({
    int? timestamp,
    int? u32,
    int? place,
    int? kind,
  })
      : _timestamp = timestamp,
        _u32 = u32,
        _place = place,
        _kind = kind;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(4);
    fbBuilder.addInt64(0, _timestamp);
    fbBuilder.addUint32(1, _u32);
    fbBuilder.addUint16(2, _place);
    fbBuilder.addUint8(3, _kind);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PushId {
  PushId._(this._bc, this._bcOffset);
  factory PushId(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PushId> reader = _PushIdReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get u32 => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  NodeId? get nodeId => NodeId.reader.vTableGetNullable(_bc, _bcOffset, 8);
  int get device => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get kind => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 12, 0);

  @override
  String toString() {
    return 'PushId{u32: ${u32}, timestamp: ${timestamp}, nodeId: ${nodeId}, device: ${device}, kind: ${kind}}';
  }

  PushIdT unpack() => PushIdT(
      u32: u32,
      timestamp: timestamp,
      nodeId: nodeId?.unpack(),
      device: device,
      kind: kind);

  static int pack(fb.Builder fbBuilder, PushIdT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class PushIdT implements fb.Packable {
  int u32;
  int timestamp;
  NodeIdT? nodeId;
  int device;
  int kind;

  PushIdT({
      this.u32 = 0,
      this.timestamp = 0,
      this.nodeId,
      this.device = 0,
      this.kind = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? nodeIdOffset = nodeId?.pack(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addUint32(0, u32);
    fbBuilder.addInt64(1, timestamp);
    fbBuilder.addOffset(2, nodeIdOffset);
    fbBuilder.addUint32(3, device);
    fbBuilder.addUint8(4, kind);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'PushIdT{u32: ${u32}, timestamp: ${timestamp}, nodeId: ${nodeId}, device: ${device}, kind: ${kind}}';
  }
}

class _PushIdReader extends fb.TableReader<PushId> {
  const _PushIdReader();

  @override
  PushId createObject(fb.BufferContext bc, int offset) => 
    PushId._(bc, offset);
}

class PushIdBuilder {
  PushIdBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addU32(int? u32) {
    fbBuilder.addUint32(0, u32);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(1, timestamp);
    return fbBuilder.offset;
  }
  int addNodeIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDevice(int? device) {
    fbBuilder.addUint32(3, device);
    return fbBuilder.offset;
  }
  int addKind(int? kind) {
    fbBuilder.addUint8(4, kind);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PushIdObjectBuilder extends fb.ObjectBuilder {
  final int? _u32;
  final int? _timestamp;
  final NodeIdObjectBuilder? _nodeId;
  final int? _device;
  final int? _kind;

  PushIdObjectBuilder({
    int? u32,
    int? timestamp,
    NodeIdObjectBuilder? nodeId,
    int? device,
    int? kind,
  })
      : _u32 = u32,
        _timestamp = timestamp,
        _nodeId = nodeId,
        _device = device,
        _kind = kind;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nodeIdOffset = _nodeId?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addUint32(0, _u32);
    fbBuilder.addInt64(1, _timestamp);
    fbBuilder.addOffset(2, nodeIdOffset);
    fbBuilder.addUint32(3, _device);
    fbBuilder.addUint8(4, _kind);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageTarget {
  MessageTarget._(this._bc, this._bcOffset);
  factory MessageTarget(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageTarget> reader = _MessageTargetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get token => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  bool get showNotif => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);

  @override
  String toString() {
    return 'MessageTarget{token: ${token}, showNotif: ${showNotif}}';
  }

  MessageTargetT unpack() => MessageTargetT(
      token: token,
      showNotif: showNotif);

  static int pack(fb.Builder fbBuilder, MessageTargetT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MessageTargetT implements fb.Packable {
  String? token;
  bool showNotif;

  MessageTargetT({
      this.token,
      this.showNotif = false});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? tokenOffset = token == null ? null
        : fbBuilder.writeString(token!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, tokenOffset);
    fbBuilder.addBool(1, showNotif);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MessageTargetT{token: ${token}, showNotif: ${showNotif}}';
  }
}

class _MessageTargetReader extends fb.TableReader<MessageTarget> {
  const _MessageTargetReader();

  @override
  MessageTarget createObject(fb.BufferContext bc, int offset) => 
    MessageTarget._(bc, offset);
}

class MessageTargetBuilder {
  MessageTargetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTokenOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addShowNotif(bool? showNotif) {
    fbBuilder.addBool(1, showNotif);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageTargetObjectBuilder extends fb.ObjectBuilder {
  final String? _token;
  final bool? _showNotif;

  MessageTargetObjectBuilder({
    String? token,
    bool? showNotif,
  })
      : _token = token,
        _showNotif = showNotif;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? tokenOffset = _token == null ? null
        : fbBuilder.writeString(_token!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, tokenOffset);
    fbBuilder.addBool(1, _showNotif);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Notifications {
  Notifications._(this._bc, this._bcOffset);
  factory Notifications(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Notifications> reader = _NotificationsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get sender => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get header => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get body => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  List<MessageTarget>? get targets => const fb.ListReader<MessageTarget>(MessageTarget.reader).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'Notifications{sender: ${sender}, root: ${root}, header: ${header}, body: ${body}, targets: ${targets}}';
  }

  NotificationsT unpack() => NotificationsT(
      sender: sender,
      root: root,
      header: header,
      body: body,
      targets: targets?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, NotificationsT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class NotificationsT implements fb.Packable {
  String? sender;
  String? root;
  String? header;
  String? body;
  List<MessageTargetT>? targets;

  NotificationsT({
      this.sender,
      this.root,
      this.header,
      this.body,
      this.targets});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? senderOffset = sender == null ? null
        : fbBuilder.writeString(sender!);
    final int? rootOffset = root == null ? null
        : fbBuilder.writeString(root!);
    final int? headerOffset = header == null ? null
        : fbBuilder.writeString(header!);
    final int? bodyOffset = body == null ? null
        : fbBuilder.writeString(body!);
    final int? targetsOffset = targets == null ? null
        : fbBuilder.writeList(targets!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, senderOffset);
    fbBuilder.addOffset(1, rootOffset);
    fbBuilder.addOffset(2, headerOffset);
    fbBuilder.addOffset(3, bodyOffset);
    fbBuilder.addOffset(4, targetsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'NotificationsT{sender: ${sender}, root: ${root}, header: ${header}, body: ${body}, targets: ${targets}}';
  }
}

class _NotificationsReader extends fb.TableReader<Notifications> {
  const _NotificationsReader();

  @override
  Notifications createObject(fb.BufferContext bc, int offset) => 
    Notifications._(bc, offset);
}

class NotificationsBuilder {
  NotificationsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addSenderOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRootOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addHeaderOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addBodyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTargetsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NotificationsObjectBuilder extends fb.ObjectBuilder {
  final String? _sender;
  final String? _root;
  final String? _header;
  final String? _body;
  final List<MessageTargetObjectBuilder>? _targets;

  NotificationsObjectBuilder({
    String? sender,
    String? root,
    String? header,
    String? body,
    List<MessageTargetObjectBuilder>? targets,
  })
      : _sender = sender,
        _root = root,
        _header = header,
        _body = body,
        _targets = targets;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? senderOffset = _sender == null ? null
        : fbBuilder.writeString(_sender!);
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    final int? headerOffset = _header == null ? null
        : fbBuilder.writeString(_header!);
    final int? bodyOffset = _body == null ? null
        : fbBuilder.writeString(_body!);
    final int? targetsOffset = _targets == null ? null
        : fbBuilder.writeList(_targets!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, senderOffset);
    fbBuilder.addOffset(1, rootOffset);
    fbBuilder.addOffset(2, headerOffset);
    fbBuilder.addOffset(3, bodyOffset);
    fbBuilder.addOffset(4, targetsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PushRequest {
  PushRequest._(this._bc, this._bcOffset);
  factory PushRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PushRequest> reader = _PushRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  PushId? get pushId => PushId.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get payload => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PushRequest{pushId: ${pushId}, payload: ${payload}}';
  }

  PushRequestT unpack() => PushRequestT(
      pushId: pushId?.unpack(),
      payload: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 6));

  static int pack(fb.Builder fbBuilder, PushRequestT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class PushRequestT implements fb.Packable {
  PushIdT? pushId;
  List<int>? payload;

  PushRequestT({
      this.pushId,
      this.payload});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? pushIdOffset = pushId?.pack(fbBuilder);
    final int? payloadOffset = payload == null ? null
        : fbBuilder.writeListUint8(payload!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, pushIdOffset);
    fbBuilder.addOffset(1, payloadOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'PushRequestT{pushId: ${pushId}, payload: ${payload}}';
  }
}

class _PushRequestReader extends fb.TableReader<PushRequest> {
  const _PushRequestReader();

  @override
  PushRequest createObject(fb.BufferContext bc, int offset) => 
    PushRequest._(bc, offset);
}

class PushRequestBuilder {
  PushRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPushIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPayloadOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PushRequestObjectBuilder extends fb.ObjectBuilder {
  final PushIdObjectBuilder? _pushId;
  final List<int>? _payload;

  PushRequestObjectBuilder({
    PushIdObjectBuilder? pushId,
    List<int>? payload,
  })
      : _pushId = pushId,
        _payload = payload;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pushIdOffset = _pushId?.getOrCreateOffset(fbBuilder);
    final int? payloadOffset = _payload == null ? null
        : fbBuilder.writeListUint8(_payload!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, pushIdOffset);
    fbBuilder.addOffset(1, payloadOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MediaMetadata {
  MediaMetadata._(this._bc, this._bcOffset);
  factory MediaMetadata(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MediaMetadata> reader = _MediaMetadataReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  MediaId? get mediaId => MediaId.reader.vTableGetNullable(_bc, _bcOffset, 4);
  MediaRef? get tempId => MediaRef.reader.vTableGetNullable(_bc, _bcOffset, 6);
  String? get ownerId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 10, 0);
  String? get mime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  bool get isReversed => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  bool get isEncrypted => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  bool get isPaidToView => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  bool get isPaidToOwn => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  bool get isLocked => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);
  bool get isSaved => const fb.BoolReader().vTableGet(_bc, _bcOffset, 24, false);

  @override
  String toString() {
    return 'MediaMetadata{mediaId: ${mediaId}, tempId: ${tempId}, ownerId: ${ownerId}, timestamp: ${timestamp}, mime: ${mime}, isReversed: ${isReversed}, isEncrypted: ${isEncrypted}, isPaidToView: ${isPaidToView}, isPaidToOwn: ${isPaidToOwn}, isLocked: ${isLocked}, isSaved: ${isSaved}}';
  }

  MediaMetadataT unpack() => MediaMetadataT(
      mediaId: mediaId?.unpack(),
      tempId: tempId?.unpack(),
      ownerId: ownerId,
      timestamp: timestamp,
      mime: mime,
      isReversed: isReversed,
      isEncrypted: isEncrypted,
      isPaidToView: isPaidToView,
      isPaidToOwn: isPaidToOwn,
      isLocked: isLocked,
      isSaved: isSaved);

  static int pack(fb.Builder fbBuilder, MediaMetadataT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MediaMetadataT implements fb.Packable {
  MediaIdT? mediaId;
  MediaRefT? tempId;
  String? ownerId;
  int timestamp;
  String? mime;
  bool isReversed;
  bool isEncrypted;
  bool isPaidToView;
  bool isPaidToOwn;
  bool isLocked;
  bool isSaved;

  MediaMetadataT({
      this.mediaId,
      this.tempId,
      this.ownerId,
      this.timestamp = 0,
      this.mime,
      this.isReversed = false,
      this.isEncrypted = false,
      this.isPaidToView = false,
      this.isPaidToOwn = false,
      this.isLocked = false,
      this.isSaved = false});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? mediaIdOffset = mediaId?.pack(fbBuilder);
    final int? tempIdOffset = tempId?.pack(fbBuilder);
    final int? ownerIdOffset = ownerId == null ? null
        : fbBuilder.writeString(ownerId!);
    final int? mimeOffset = mime == null ? null
        : fbBuilder.writeString(mime!);
    fbBuilder.startTable(11);
    fbBuilder.addOffset(0, mediaIdOffset);
    fbBuilder.addOffset(1, tempIdOffset);
    fbBuilder.addOffset(2, ownerIdOffset);
    fbBuilder.addInt64(3, timestamp);
    fbBuilder.addOffset(4, mimeOffset);
    fbBuilder.addBool(5, isReversed);
    fbBuilder.addBool(6, isEncrypted);
    fbBuilder.addBool(7, isPaidToView);
    fbBuilder.addBool(8, isPaidToOwn);
    fbBuilder.addBool(9, isLocked);
    fbBuilder.addBool(10, isSaved);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MediaMetadataT{mediaId: ${mediaId}, tempId: ${tempId}, ownerId: ${ownerId}, timestamp: ${timestamp}, mime: ${mime}, isReversed: ${isReversed}, isEncrypted: ${isEncrypted}, isPaidToView: ${isPaidToView}, isPaidToOwn: ${isPaidToOwn}, isLocked: ${isLocked}, isSaved: ${isSaved}}';
  }
}

class _MediaMetadataReader extends fb.TableReader<MediaMetadata> {
  const _MediaMetadataReader();

  @override
  MediaMetadata createObject(fb.BufferContext bc, int offset) => 
    MediaMetadata._(bc, offset);
}

class MediaMetadataBuilder {
  MediaMetadataBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addMediaIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTempIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOwnerIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(3, timestamp);
    return fbBuilder.offset;
  }
  int addMimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIsReversed(bool? isReversed) {
    fbBuilder.addBool(5, isReversed);
    return fbBuilder.offset;
  }
  int addIsEncrypted(bool? isEncrypted) {
    fbBuilder.addBool(6, isEncrypted);
    return fbBuilder.offset;
  }
  int addIsPaidToView(bool? isPaidToView) {
    fbBuilder.addBool(7, isPaidToView);
    return fbBuilder.offset;
  }
  int addIsPaidToOwn(bool? isPaidToOwn) {
    fbBuilder.addBool(8, isPaidToOwn);
    return fbBuilder.offset;
  }
  int addIsLocked(bool? isLocked) {
    fbBuilder.addBool(9, isLocked);
    return fbBuilder.offset;
  }
  int addIsSaved(bool? isSaved) {
    fbBuilder.addBool(10, isSaved);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MediaMetadataObjectBuilder extends fb.ObjectBuilder {
  final MediaIdObjectBuilder? _mediaId;
  final MediaRefObjectBuilder? _tempId;
  final String? _ownerId;
  final int? _timestamp;
  final String? _mime;
  final bool? _isReversed;
  final bool? _isEncrypted;
  final bool? _isPaidToView;
  final bool? _isPaidToOwn;
  final bool? _isLocked;
  final bool? _isSaved;

  MediaMetadataObjectBuilder({
    MediaIdObjectBuilder? mediaId,
    MediaRefObjectBuilder? tempId,
    String? ownerId,
    int? timestamp,
    String? mime,
    bool? isReversed,
    bool? isEncrypted,
    bool? isPaidToView,
    bool? isPaidToOwn,
    bool? isLocked,
    bool? isSaved,
  })
      : _mediaId = mediaId,
        _tempId = tempId,
        _ownerId = ownerId,
        _timestamp = timestamp,
        _mime = mime,
        _isReversed = isReversed,
        _isEncrypted = isEncrypted,
        _isPaidToView = isPaidToView,
        _isPaidToOwn = isPaidToOwn,
        _isLocked = isLocked,
        _isSaved = isSaved;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? mediaIdOffset = _mediaId?.getOrCreateOffset(fbBuilder);
    final int? tempIdOffset = _tempId?.getOrCreateOffset(fbBuilder);
    final int? ownerIdOffset = _ownerId == null ? null
        : fbBuilder.writeString(_ownerId!);
    final int? mimeOffset = _mime == null ? null
        : fbBuilder.writeString(_mime!);
    fbBuilder.startTable(11);
    fbBuilder.addOffset(0, mediaIdOffset);
    fbBuilder.addOffset(1, tempIdOffset);
    fbBuilder.addOffset(2, ownerIdOffset);
    fbBuilder.addInt64(3, _timestamp);
    fbBuilder.addOffset(4, mimeOffset);
    fbBuilder.addBool(5, _isReversed);
    fbBuilder.addBool(6, _isEncrypted);
    fbBuilder.addBool(7, _isPaidToView);
    fbBuilder.addBool(8, _isPaidToOwn);
    fbBuilder.addBool(9, _isLocked);
    fbBuilder.addBool(10, _isSaved);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FullMedia {
  FullMedia._(this._bc, this._bcOffset);
  factory FullMedia(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FullMedia> reader = _FullMediaReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  MediaMetadata? get metadata => MediaMetadata.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get data => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'FullMedia{metadata: ${metadata}, data: ${data}}';
  }

  FullMediaT unpack() => FullMediaT(
      metadata: metadata?.unpack(),
      data: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 6));

  static int pack(fb.Builder fbBuilder, FullMediaT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class FullMediaT implements fb.Packable {
  MediaMetadataT? metadata;
  List<int>? data;

  FullMediaT({
      this.metadata,
      this.data});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? metadataOffset = metadata?.pack(fbBuilder);
    final int? dataOffset = data == null ? null
        : fbBuilder.writeListUint8(data!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, dataOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'FullMediaT{metadata: ${metadata}, data: ${data}}';
  }
}

class _FullMediaReader extends fb.TableReader<FullMedia> {
  const _FullMediaReader();

  @override
  FullMedia createObject(fb.BufferContext bc, int offset) => 
    FullMedia._(bc, offset);
}

class FullMediaBuilder {
  FullMediaBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FullMediaObjectBuilder extends fb.ObjectBuilder {
  final MediaMetadataObjectBuilder? _metadata;
  final List<int>? _data;

  FullMediaObjectBuilder({
    MediaMetadataObjectBuilder? metadata,
    List<int>? data,
  })
      : _metadata = metadata,
        _data = data;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeListUint8(_data!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, dataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Offset {
  Offset._(this._bc, this._bcOffset);

  static const fb.Reader<Offset> reader = _OffsetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get x => const fb.Float32Reader().read(_bc, _bcOffset + 0);
  double get y => const fb.Float32Reader().read(_bc, _bcOffset + 4);

  @override
  String toString() {
    return 'Offset{x: ${x}, y: ${y}}';
  }

  OffsetT unpack() => OffsetT(
      x: x,
      y: y);

  static int pack(fb.Builder fbBuilder, OffsetT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class OffsetT implements fb.Packable {
  double x;
  double y;

  OffsetT({
      required this.x,
      required this.y});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.putFloat32(y);
    fbBuilder.putFloat32(x);
    return fbBuilder.offset;
  }

  @override
  String toString() {
    return 'OffsetT{x: ${x}, y: ${y}}';
  }
}

class _OffsetReader extends fb.StructReader<Offset> {
  const _OffsetReader();

  @override
  int get size => 8;

  @override
  Offset createObject(fb.BufferContext bc, int offset) => 
    Offset._(bc, offset);
}

class OffsetBuilder {
  OffsetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(double x, double y) {
    fbBuilder.putFloat32(y);
    fbBuilder.putFloat32(x);
    return fbBuilder.offset;
  }

}

class OffsetObjectBuilder extends fb.ObjectBuilder {
  final double _x;
  final double _y;

  OffsetObjectBuilder({
    required double x,
    required double y,
  })
      : _x = x,
        _y = y;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putFloat32(_y);
    fbBuilder.putFloat32(_x);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Sticker {
  Sticker._(this._bc, this._bcOffset);
  factory Sticker(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Sticker> reader = _StickerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get mediaId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get temp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  Offset? get pos => Offset.reader.vTableGetNullable(_bc, _bcOffset, 8);
  Offset? get size => Offset.reader.vTableGetNullable(_bc, _bcOffset, 10);
  double get rotation => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  double get scale => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  String? get emoji => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'Sticker{mediaId: ${mediaId}, temp: ${temp}, pos: ${pos}, size: ${size}, rotation: ${rotation}, scale: ${scale}, emoji: ${emoji}}';
  }

  StickerT unpack() => StickerT(
      mediaId: mediaId,
      temp: temp,
      pos: pos?.unpack(),
      size: size?.unpack(),
      rotation: rotation,
      scale: scale,
      emoji: emoji);

  static int pack(fb.Builder fbBuilder, StickerT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class StickerT implements fb.Packable {
  String? mediaId;
  String? temp;
  OffsetT? pos;
  OffsetT? size;
  double rotation;
  double scale;
  String? emoji;

  StickerT({
      this.mediaId,
      this.temp,
      this.pos,
      this.size,
      this.rotation = 0.0,
      this.scale = 0.0,
      this.emoji});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? mediaIdOffset = mediaId == null ? null
        : fbBuilder.writeString(mediaId!);
    final int? tempOffset = temp == null ? null
        : fbBuilder.writeString(temp!);
    final int? emojiOffset = emoji == null ? null
        : fbBuilder.writeString(emoji!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, mediaIdOffset);
    fbBuilder.addOffset(1, tempOffset);
    if (pos != null) {
      fbBuilder.addStruct(2, pos!.pack(fbBuilder));
    }
    if (size != null) {
      fbBuilder.addStruct(3, size!.pack(fbBuilder));
    }
    fbBuilder.addFloat32(4, rotation);
    fbBuilder.addFloat32(5, scale);
    fbBuilder.addOffset(6, emojiOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'StickerT{mediaId: ${mediaId}, temp: ${temp}, pos: ${pos}, size: ${size}, rotation: ${rotation}, scale: ${scale}, emoji: ${emoji}}';
  }
}

class _StickerReader extends fb.TableReader<Sticker> {
  const _StickerReader();

  @override
  Sticker createObject(fb.BufferContext bc, int offset) => 
    Sticker._(bc, offset);
}

class StickerBuilder {
  StickerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addMediaIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTempOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPos(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }
  int addSize(int offset) {
    fbBuilder.addStruct(3, offset);
    return fbBuilder.offset;
  }
  int addRotation(double? rotation) {
    fbBuilder.addFloat32(4, rotation);
    return fbBuilder.offset;
  }
  int addScale(double? scale) {
    fbBuilder.addFloat32(5, scale);
    return fbBuilder.offset;
  }
  int addEmojiOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StickerObjectBuilder extends fb.ObjectBuilder {
  final String? _mediaId;
  final String? _temp;
  final OffsetObjectBuilder? _pos;
  final OffsetObjectBuilder? _size;
  final double? _rotation;
  final double? _scale;
  final String? _emoji;

  StickerObjectBuilder({
    String? mediaId,
    String? temp,
    OffsetObjectBuilder? pos,
    OffsetObjectBuilder? size,
    double? rotation,
    double? scale,
    String? emoji,
  })
      : _mediaId = mediaId,
        _temp = temp,
        _pos = pos,
        _size = size,
        _rotation = rotation,
        _scale = scale,
        _emoji = emoji;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? mediaIdOffset = _mediaId == null ? null
        : fbBuilder.writeString(_mediaId!);
    final int? tempOffset = _temp == null ? null
        : fbBuilder.writeString(_temp!);
    final int? emojiOffset = _emoji == null ? null
        : fbBuilder.writeString(_emoji!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, mediaIdOffset);
    fbBuilder.addOffset(1, tempOffset);
    if (_pos != null) {
      fbBuilder.addStruct(2, _pos!.finish(fbBuilder));
    }
    if (_size != null) {
      fbBuilder.addStruct(3, _size!.finish(fbBuilder));
    }
    fbBuilder.addFloat32(4, _rotation);
    fbBuilder.addFloat32(5, _scale);
    fbBuilder.addOffset(6, emojiOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageEvent {
  MessageEvent._(this._bc, this._bcOffset);
  factory MessageEvent(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageEvent> reader = _MessageEventReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  MessageId? get chatId => MessageId.reader.vTableGetNullable(_bc, _bcOffset, 4);
  int get type => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get reactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get senderId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get senderTag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get messageId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get tag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  int get timestamp => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 20, 0);
  String? get forwardedFrom => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  String? get forwardedFromTag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  String? get paymentId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  List<String>? get nodes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 28);
  List<String>? get replies => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  String? get txt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  MediaRef? get mediaRef => MediaRef.reader.vTableGetNullable(_bc, _bcOffset, 34);
  MediaRef? get paymentRef => MediaRef.reader.vTableGetNullable(_bc, _bcOffset, 36);
  String? get emoji => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  List<Sticker>? get sticks => const fb.ListReader<Sticker>(Sticker.reader).vTableGetNullable(_bc, _bcOffset, 40);
  Offset? get snipSize => Offset.reader.vTableGetNullable(_bc, _bcOffset, 42);

  @override
  String toString() {
    return 'MessageEvent{chatId: ${chatId}, type: ${type}, reactionId: ${reactionId}, senderId: ${senderId}, senderTag: ${senderTag}, messageId: ${messageId}, root: ${root}, tag: ${tag}, timestamp: ${timestamp}, forwardedFrom: ${forwardedFrom}, forwardedFromTag: ${forwardedFromTag}, paymentId: ${paymentId}, nodes: ${nodes}, replies: ${replies}, txt: ${txt}, mediaRef: ${mediaRef}, paymentRef: ${paymentRef}, emoji: ${emoji}, sticks: ${sticks}, snipSize: ${snipSize}}';
  }

  MessageEventT unpack() => MessageEventT(
      chatId: chatId?.unpack(),
      type: type,
      reactionId: reactionId,
      senderId: senderId,
      senderTag: senderTag,
      messageId: messageId,
      root: root,
      tag: tag,
      timestamp: timestamp,
      forwardedFrom: forwardedFrom,
      forwardedFromTag: forwardedFromTag,
      paymentId: paymentId,
      nodes: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 28),
      replies: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 30),
      txt: txt,
      mediaRef: mediaRef?.unpack(),
      paymentRef: paymentRef?.unpack(),
      emoji: emoji,
      sticks: sticks?.map((e) => e.unpack()).toList(),
      snipSize: snipSize?.unpack());

  static int pack(fb.Builder fbBuilder, MessageEventT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MessageEventT implements fb.Packable {
  MessageIdT? chatId;
  int type;
  String? reactionId;
  String? senderId;
  String? senderTag;
  String? messageId;
  String? root;
  String? tag;
  int timestamp;
  String? forwardedFrom;
  String? forwardedFromTag;
  String? paymentId;
  List<String>? nodes;
  List<String>? replies;
  String? txt;
  MediaRefT? mediaRef;
  MediaRefT? paymentRef;
  String? emoji;
  List<StickerT>? sticks;
  OffsetT? snipSize;

  MessageEventT({
      this.chatId,
      this.type = 0,
      this.reactionId,
      this.senderId,
      this.senderTag,
      this.messageId,
      this.root,
      this.tag,
      this.timestamp = 0,
      this.forwardedFrom,
      this.forwardedFromTag,
      this.paymentId,
      this.nodes,
      this.replies,
      this.txt,
      this.mediaRef,
      this.paymentRef,
      this.emoji,
      this.sticks,
      this.snipSize});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? chatIdOffset = chatId?.pack(fbBuilder);
    final int? reactionIdOffset = reactionId == null ? null
        : fbBuilder.writeString(reactionId!);
    final int? senderIdOffset = senderId == null ? null
        : fbBuilder.writeString(senderId!);
    final int? senderTagOffset = senderTag == null ? null
        : fbBuilder.writeString(senderTag!);
    final int? messageIdOffset = messageId == null ? null
        : fbBuilder.writeString(messageId!);
    final int? rootOffset = root == null ? null
        : fbBuilder.writeString(root!);
    final int? tagOffset = tag == null ? null
        : fbBuilder.writeString(tag!);
    final int? forwardedFromOffset = forwardedFrom == null ? null
        : fbBuilder.writeString(forwardedFrom!);
    final int? forwardedFromTagOffset = forwardedFromTag == null ? null
        : fbBuilder.writeString(forwardedFromTag!);
    final int? paymentIdOffset = paymentId == null ? null
        : fbBuilder.writeString(paymentId!);
    final int? nodesOffset = nodes == null ? null
        : fbBuilder.writeList(nodes!.map(fbBuilder.writeString).toList());
    final int? repliesOffset = replies == null ? null
        : fbBuilder.writeList(replies!.map(fbBuilder.writeString).toList());
    final int? txtOffset = txt == null ? null
        : fbBuilder.writeString(txt!);
    final int? mediaRefOffset = mediaRef?.pack(fbBuilder);
    final int? paymentRefOffset = paymentRef?.pack(fbBuilder);
    final int? emojiOffset = emoji == null ? null
        : fbBuilder.writeString(emoji!);
    final int? sticksOffset = sticks == null ? null
        : fbBuilder.writeList(sticks!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(20);
    fbBuilder.addOffset(0, chatIdOffset);
    fbBuilder.addUint8(1, type);
    fbBuilder.addOffset(2, reactionIdOffset);
    fbBuilder.addOffset(3, senderIdOffset);
    fbBuilder.addOffset(4, senderTagOffset);
    fbBuilder.addOffset(5, messageIdOffset);
    fbBuilder.addOffset(6, rootOffset);
    fbBuilder.addOffset(7, tagOffset);
    fbBuilder.addUint64(8, timestamp);
    fbBuilder.addOffset(9, forwardedFromOffset);
    fbBuilder.addOffset(10, forwardedFromTagOffset);
    fbBuilder.addOffset(11, paymentIdOffset);
    fbBuilder.addOffset(12, nodesOffset);
    fbBuilder.addOffset(13, repliesOffset);
    fbBuilder.addOffset(14, txtOffset);
    fbBuilder.addOffset(15, mediaRefOffset);
    fbBuilder.addOffset(16, paymentRefOffset);
    fbBuilder.addOffset(17, emojiOffset);
    fbBuilder.addOffset(18, sticksOffset);
    if (snipSize != null) {
      fbBuilder.addStruct(19, snipSize!.pack(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MessageEventT{chatId: ${chatId}, type: ${type}, reactionId: ${reactionId}, senderId: ${senderId}, senderTag: ${senderTag}, messageId: ${messageId}, root: ${root}, tag: ${tag}, timestamp: ${timestamp}, forwardedFrom: ${forwardedFrom}, forwardedFromTag: ${forwardedFromTag}, paymentId: ${paymentId}, nodes: ${nodes}, replies: ${replies}, txt: ${txt}, mediaRef: ${mediaRef}, paymentRef: ${paymentRef}, emoji: ${emoji}, sticks: ${sticks}, snipSize: ${snipSize}}';
  }
}

class _MessageEventReader extends fb.TableReader<MessageEvent> {
  const _MessageEventReader();

  @override
  MessageEvent createObject(fb.BufferContext bc, int offset) => 
    MessageEvent._(bc, offset);
}

class MessageEventBuilder {
  MessageEventBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(20);
  }

  int addChatIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addType(int? type) {
    fbBuilder.addUint8(1, type);
    return fbBuilder.offset;
  }
  int addReactionIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSenderIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSenderTagOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMessageIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addRootOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTagOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint64(8, timestamp);
    return fbBuilder.offset;
  }
  int addForwardedFromOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addForwardedFromTagOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addPaymentIdOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addNodesOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addRepliesOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addTxtOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addMediaRefOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addPaymentRefOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addEmojiOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addSticksOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addSnipSize(int offset) {
    fbBuilder.addStruct(19, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageEventObjectBuilder extends fb.ObjectBuilder {
  final MessageIdObjectBuilder? _chatId;
  final int? _type;
  final String? _reactionId;
  final String? _senderId;
  final String? _senderTag;
  final String? _messageId;
  final String? _root;
  final String? _tag;
  final int? _timestamp;
  final String? _forwardedFrom;
  final String? _forwardedFromTag;
  final String? _paymentId;
  final List<String>? _nodes;
  final List<String>? _replies;
  final String? _txt;
  final MediaRefObjectBuilder? _mediaRef;
  final MediaRefObjectBuilder? _paymentRef;
  final String? _emoji;
  final List<StickerObjectBuilder>? _sticks;
  final OffsetObjectBuilder? _snipSize;

  MessageEventObjectBuilder({
    MessageIdObjectBuilder? chatId,
    int? type,
    String? reactionId,
    String? senderId,
    String? senderTag,
    String? messageId,
    String? root,
    String? tag,
    int? timestamp,
    String? forwardedFrom,
    String? forwardedFromTag,
    String? paymentId,
    List<String>? nodes,
    List<String>? replies,
    String? txt,
    MediaRefObjectBuilder? mediaRef,
    MediaRefObjectBuilder? paymentRef,
    String? emoji,
    List<StickerObjectBuilder>? sticks,
    OffsetObjectBuilder? snipSize,
  })
      : _chatId = chatId,
        _type = type,
        _reactionId = reactionId,
        _senderId = senderId,
        _senderTag = senderTag,
        _messageId = messageId,
        _root = root,
        _tag = tag,
        _timestamp = timestamp,
        _forwardedFrom = forwardedFrom,
        _forwardedFromTag = forwardedFromTag,
        _paymentId = paymentId,
        _nodes = nodes,
        _replies = replies,
        _txt = txt,
        _mediaRef = mediaRef,
        _paymentRef = paymentRef,
        _emoji = emoji,
        _sticks = sticks,
        _snipSize = snipSize;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? chatIdOffset = _chatId?.getOrCreateOffset(fbBuilder);
    final int? reactionIdOffset = _reactionId == null ? null
        : fbBuilder.writeString(_reactionId!);
    final int? senderIdOffset = _senderId == null ? null
        : fbBuilder.writeString(_senderId!);
    final int? senderTagOffset = _senderTag == null ? null
        : fbBuilder.writeString(_senderTag!);
    final int? messageIdOffset = _messageId == null ? null
        : fbBuilder.writeString(_messageId!);
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    final int? tagOffset = _tag == null ? null
        : fbBuilder.writeString(_tag!);
    final int? forwardedFromOffset = _forwardedFrom == null ? null
        : fbBuilder.writeString(_forwardedFrom!);
    final int? forwardedFromTagOffset = _forwardedFromTag == null ? null
        : fbBuilder.writeString(_forwardedFromTag!);
    final int? paymentIdOffset = _paymentId == null ? null
        : fbBuilder.writeString(_paymentId!);
    final int? nodesOffset = _nodes == null ? null
        : fbBuilder.writeList(_nodes!.map(fbBuilder.writeString).toList());
    final int? repliesOffset = _replies == null ? null
        : fbBuilder.writeList(_replies!.map(fbBuilder.writeString).toList());
    final int? txtOffset = _txt == null ? null
        : fbBuilder.writeString(_txt!);
    final int? mediaRefOffset = _mediaRef?.getOrCreateOffset(fbBuilder);
    final int? paymentRefOffset = _paymentRef?.getOrCreateOffset(fbBuilder);
    final int? emojiOffset = _emoji == null ? null
        : fbBuilder.writeString(_emoji!);
    final int? sticksOffset = _sticks == null ? null
        : fbBuilder.writeList(_sticks!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(20);
    fbBuilder.addOffset(0, chatIdOffset);
    fbBuilder.addUint8(1, _type);
    fbBuilder.addOffset(2, reactionIdOffset);
    fbBuilder.addOffset(3, senderIdOffset);
    fbBuilder.addOffset(4, senderTagOffset);
    fbBuilder.addOffset(5, messageIdOffset);
    fbBuilder.addOffset(6, rootOffset);
    fbBuilder.addOffset(7, tagOffset);
    fbBuilder.addUint64(8, _timestamp);
    fbBuilder.addOffset(9, forwardedFromOffset);
    fbBuilder.addOffset(10, forwardedFromTagOffset);
    fbBuilder.addOffset(11, paymentIdOffset);
    fbBuilder.addOffset(12, nodesOffset);
    fbBuilder.addOffset(13, repliesOffset);
    fbBuilder.addOffset(14, txtOffset);
    fbBuilder.addOffset(15, mediaRefOffset);
    fbBuilder.addOffset(16, paymentRefOffset);
    fbBuilder.addOffset(17, emojiOffset);
    fbBuilder.addOffset(18, sticksOffset);
    if (_snipSize != null) {
      fbBuilder.addStruct(19, _snipSize!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
